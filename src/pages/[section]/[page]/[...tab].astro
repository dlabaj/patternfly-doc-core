---
import { getCollection, render } from 'astro:content'
import { Title, PageSection, Content as PFContent } from '@patternfly/react-core'
import MainLayout from '../../../layouts/Main.astro'
import { content } from "../../../content"
import { kebabCase } from 'change-case'
import { componentTabs, tabNames } from '../../../globals';

export async function getStaticPaths() {
  const collections = await Promise.all(content.map(async (entry) => await getCollection(entry.name as 'textContent')))

  const flatCol =  collections.flat().map((entry) => {
    // Build tabs dictionary
    let tab = entry.data.tab;
    if(tab === 'react' || tab === 'html') { // if tab is default repo value, check for demos/deprecated
      if(entry.id.includes('demos')) {
        tab = `${tab}-demos`;
      } else if (entry.id.includes('deprecated')) {
        tab = `${tab}-deprecated`;
      }
    }

    // if no dictionary entry exists, and tab data exists
    if(componentTabs[entry.data.id] === undefined && tab) { 
      componentTabs[entry.data.id] = [tab];
    // if dictionary entry & tab data exists, and entry does not include tab
    } else if (componentTabs[entry.data.id] && tab && !componentTabs[entry.data.id].includes(tab)) { 
      componentTabs[entry.data.id] = [...componentTabs[entry.data.id], tab];
    }

    return {
      params: { page: kebabCase(entry.data.id), section: entry.data.section, tab },
      props: { entry, title: entry.data.title, component: entry.data.id,  package: entry.data.package },
    }
  })

  const defaultOrder = 50;
  const sourceOrder: any = {
    react: 1,
    'react-next': 1.1,
    'react-demos': 2,
    'react-deprecated': 2.1,
    html: 3,
    'html-demos': 4,
    'design-guidelines': 99,
    'accessibility': 100,
    'upgrade-guide': 101,
    'release-notes': 102,
  };

  const sortSources = (s1: string, s2: string) => {
    const s1Index = sourceOrder[s1] || defaultOrder;
    const s2Index = sourceOrder[s2] || defaultOrder;
    if (s1Index === defaultOrder && s2Index === defaultOrder) {
      return s1.localeCompare(s2);
    }

    return s1Index > s2Index ? 1 : -1;
  }

  // Sort tabs entries based on above sort order
  // Ensures all tabs are displayed in a consistent order & which tab gets displayed for a component route without a tab 
  Object.values(componentTabs).map((tabs: any) => {
    tabs.sort(sortSources)
  })

  return flatCol;
}

const { entry } = Astro.props
const { title, id, section } = entry.data
const { Content } = await render(entry)
const currentPath = Astro.url.pathname;
---

<MainLayout>
  {
    title && (
      <Title headingLevel="h1" size="4xl">
        {title} 
      </Title>
    )
  }
  {componentTabs[id] && (
    <PageSection id="ws-sticky-nav-tabs" stickyOnBreakpoint={{ default: 'top' }} type="tabs">
      <div class="pf-v6-c-tabs pf-m-page-insets pf-m-no-border-bottom">
        <ul class="pf-v6-c-tabs__list">
          {componentTabs[id].map((tab: string) => (
            // eslint-disable-next-line react/jsx-key
            <li
              class={`pf-v6-c-tabs__item${currentPath === `/${section}/${kebabCase(id)}/${tab}` ? ' pf-m-current' : ''}`}
            >
              <a class="pf-v6-c-tabs__link" href={`/${section}/${kebabCase(id)}/${tab}`}>
                {tabNames[tab]}
              </a>
            </li>
          ))}
        </ul>
      </div>
    </PageSection>
  )}
  <PageSection id="main-content" isFilled>
    <PFContent>
      <Content />
    </PFContent>
  </PageSection>
</MainLayout>
